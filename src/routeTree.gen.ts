/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RelatoriosRouteImport } from './routes/relatorios'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as PacientesRouteImport } from './routes/pacientes'
import { Route as ExamesRouteImport } from './routes/exames'
import { Route as IndexRouteImport } from './routes/index'

const RelatoriosRoute = RelatoriosRouteImport.update({
  id: '/relatorios',
  path: '/relatorios',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const PacientesRoute = PacientesRouteImport.update({
  id: '/pacientes',
  path: '/pacientes',
  getParentRoute: () => rootRouteImport,
} as any)
const ExamesRoute = ExamesRouteImport.update({
  id: '/exames',
  path: '/exames',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/exames': typeof ExamesRoute
  '/pacientes': typeof PacientesRoute
  '/redirect': typeof RedirectRoute
  '/relatorios': typeof RelatoriosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/exames': typeof ExamesRoute
  '/pacientes': typeof PacientesRoute
  '/redirect': typeof RedirectRoute
  '/relatorios': typeof RelatoriosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/exames': typeof ExamesRoute
  '/pacientes': typeof PacientesRoute
  '/redirect': typeof RedirectRoute
  '/relatorios': typeof RelatoriosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/exames' | '/pacientes' | '/redirect' | '/relatorios'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/exames' | '/pacientes' | '/redirect' | '/relatorios'
  id: '__root__' | '/' | '/exames' | '/pacientes' | '/redirect' | '/relatorios'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExamesRoute: typeof ExamesRoute
  PacientesRoute: typeof PacientesRoute
  RedirectRoute: typeof RedirectRoute
  RelatoriosRoute: typeof RelatoriosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/relatorios': {
      id: '/relatorios'
      path: '/relatorios'
      fullPath: '/relatorios'
      preLoaderRoute: typeof RelatoriosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pacientes': {
      id: '/pacientes'
      path: '/pacientes'
      fullPath: '/pacientes'
      preLoaderRoute: typeof PacientesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exames': {
      id: '/exames'
      path: '/exames'
      fullPath: '/exames'
      preLoaderRoute: typeof ExamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExamesRoute: ExamesRoute,
  PacientesRoute: PacientesRoute,
  RedirectRoute: RedirectRoute,
  RelatoriosRoute: RelatoriosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
